/*
 * Copyright 2016 Nam Nguyen, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'

import java.text.DateFormat
import java.text.SimpleDateFormat

def dateTimeInt() {
  DateFormat df = new SimpleDateFormat("yyyyMMdd");
  return Integer.parseInt(df.format(new Date()));
}

def dateTimeString() {
  DateFormat df = new SimpleDateFormat("yyyy.MM.dd");
  return df.format(new Date());
}

android {
  compileSdkVersion 23
  buildToolsVersion "23.0.3"

  defaultConfig {
    applicationId "im.ene.lab.kazora"
    minSdkVersion 16
    targetSdkVersion 23
    versionCode dateTimeInt()
    versionName dateTimeString()

    archivesBaseName = "kazora-${versionName}"
    vectorDrawables.useSupportLibrary = true
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField("String", "REALM_NAME", "\"kazora.realm\"")
    }

    debug {
      applicationIdSuffix '.debug'
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField("String", "REALM_NAME", "\"kazora-debug.realm\"")
    }
  }

  productFlavors {
    mock {}
    prod {}
  }

  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }

  dexOptions {
    incremental true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    disable 'InvalidPackage'
    disable 'PrivateResource'
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  def libraries = rootProject.ext.libraries

  compile libraries.recyclerView
  compile libraries.design

  compile libraries.butterknife

  compile libraries.retrofit2
  compile libraries.retrofit2Mock
  compile libraries.gsonConverter
  compile libraries.rxJavaAdapter
  compile libraries.okhttp3
  compile libraries.gson

  compile libraries.rxJava
  compile libraries.rxAndroid

  apt libraries.daggerCompiler
  compile libraries.dagger
  provided libraries.javaxAnnotation

  // Dependencies for local unit tests
  testCompile libraries.junit
  testCompile libraries.mockito
  testCompile libraries.hamcrest
}
